<?php

namespace api\models;

use common\models\AuthAssignment;
use common\helper\HelperFunction;
use common\models\BaseModel;
use yii\web\BadRequestHttpException;
use yii\web\IdentityInterface;

class User extends BaseModel implements IdentityInterface
{

    const STATUS_INACTIVE = 0;
    const STATUS_DELETED = 2;
    const STATUS_ACTIVE = 1;
    const STATUS_EMAIL_VERIFIED = 0;
    const STATUS_EMAIL_UN_VERIFIED = 1;

    const SCENARIO_REGISTER = "SCENARIO_REGISTER";

    public $tokenExpire = 0;

    public static function tableName()
    {
        return 'user'; // TODO: Change the autogenerated stub
    }

    public static function getUserCacheKey()
    {
        return 'user_';
    }

    public static function findIdentity($id)
    {
        return User::findOne($id);
    }


    public function getId()
    {
        return $this->id;
    }


    public function validateAuthKey($authKey)
    {
        return $this->secret_key === $authKey;
    }

    public static function findByUsername($username)
    {
        return static::findOne(['email' => $username]);
    }

    public static function getModelType()
    {
        return 'user';
    }

    public function fields()
    {
        $fields = parent::fields();
        unset($fields['secret_key'], $fields['password']);
        return $fields;
    }

    public function extraFields()
    {
        return ['role'];
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        try {
            $jwt = \Yii::$app->jwt;
            $signer = $jwt->getSigner('HS256');
            $token = \Yii::$app->jwt->getParser()->parse((string)$token);
            if (!$token->verify($signer, JWT_SECRET)) {
                return null;
            }
            $user = new User();
            $user->id = $token->getClaim("uid");
            $user->email = $token->getClaim("email");
            $user->full_name = $token->getClaim("full_name");
            $user->phone = $token->getClaim("phone");
            $user->status = $token->getClaim("status");
            $user->isNewRecord = false;
            $user->tokenExpire = $token->getClaim("exp");
            return $user;
        } catch (\Exception $e) {
            HelperFunction::error_log($e->getMessage());
            return null;
        }
    }

    public function getAuthKey()
    {
        return $this->secret_key;
    }

    public static function generatePassword($password, $email, $secret_key)
    {
        return md5($email . "_" . $password . "_" . $secret_key);
    }

    public function comparePassword($password)
    {
        return $this->password === User::generatePassword($password, $this->email, $this->secret_key);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            try {
                $this->secret_key = \Yii::$app->getSecurity()->generateRandomString(32);
                $this->username = $this->email;
                $this->password = User::generatePassword($this->password, $this->email, $this->secret_key);
            } catch (\Exception $e) {
                $this->addError('email', $e->getMessage());
                return false;
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param $rememberMe
     * @return string
     * @throws \yii\base\Exception
     */
    public function saveLoginToken($rememberMe = true)
    {
        $token = \Yii::$app->getSecurity()->generateRandomString(24);
        $savedToken = "LOGIN_" . $token;

        $lastToken = \Yii::$app->cache->get("LAST_TOKEN" . $this->email);
        if ($lastToken) {
            \Yii::$app->cache->delete($lastToken);
        }

        \Yii::$app->cache->set($savedToken, $this);
        \Yii::$app->cache->set("LAST_TOKEN" . $this->email, $savedToken);
        return $token;
    }

    /**
     * @param $rememberMe
     * @return string
     * @throws \yii\base\Exception
     */
    public function saveLoginJWT($rememberMe = false)
    {
        $jwt = \Yii::$app->jwt;
        $signer = $jwt->getSigner('HS256');
        $key = $jwt->getKey(JWT_SECRET);
        $time = time();
        $expireTime = $time + ($rememberMe ? 3600 * 24 * 30 : 3600 * 48);
        $token = $jwt->getBuilder()
            ->issuedAt($time) // Configures the time that the token was issue (iat claim)
            ->canOnlyBeUsedAfter($expireTime) // Configures the time that the token can be used (nbf claim)
            ->expiresAt($expireTime) // Configures the expiration time of the token (exp claim)
            ->withClaim('uid', $this->getId()) // Configures a new claim, called "uid"
            ->withClaim('email', $this->email) // Configures a new claim, called "uid"
            ->withClaim('phone', $this->phone) // Configures a new claim, called "uid"
            ->withClaim('status', $this->status) // Configures a new claim, called "uid"
            ->withClaim('full_name', $this->full_name)
//            ->withClaim('role', $this->note) // TODO Update role
            ->getToken($signer, $key); // Retrieves the generated token
        return $token->__toString();
    }

    public function getRole()
    {
        return $this->hasOne(AuthAssignment::class, ['user_id' => 'id'])->select(['item_name']);
    }

    public function logout()
    {
    }


}
